/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BedSheetPanel.java
 *
 * Created on Apr 25, 2013, 1:53:11 AM
 */
package view;

import celcius.Config;
import excel.ItemSummaryObject;
import excel.QuationObject;
import excel.SummaryObject;
import java.awt.EventQueue;
import java.text.DecimalFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import logic.BedSheetLogic;
import logic.BolsterPillowcaseLogic;
import logic.FittedSheetLogic;
import ui.helpers.ComboBoxRenderer;
import viewmodels.FittedSheetViewModel;

/**
 *
 * @author naka
 */
public class FittedSheetsCostingPanel extends javax.swing.JPanel {

    /**
     * Creates new form BedSheetPanel
     */
    public FittedSheetsCostingPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        bedSheetCostingPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fittedSheetProductRangeCombo = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        fittedSheetMaterialTypeCombo = new javax.swing.JComboBox();
        fittedSheetSizeCombo = new javax.swing.JComboBox();
        fittedSheetHeight = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        bedSheetSizeLable = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        fittedSheetUseCustom = new javax.swing.JRadioButton();
        bedSheetCustomPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        fittedSheetCustomWidth = new javax.swing.JTextField();
        fittedSheetCustomLength = new javax.swing.JTextField();
        fittedSheetIncludeLable = new javax.swing.JRadioButton();
        fittedSheetIncludeTag = new javax.swing.JRadioButton();
        fittedSheetIncludeCardboard = new javax.swing.JRadioButton();
        fittedSheetIncludePEBag = new javax.swing.JRadioButton();
        fittedSheetSubmitButton = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        fittedSheetMarginField = new javax.swing.JTextField();
        fittedSheetTaxField = new javax.swing.JTextField();
        jLabel84 = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        bedsheetOtherCost = new javax.swing.JLabel();
        fittedSheetOtherCostVal = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        fittedSheetWastage = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        bedsheetOtherCost1 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        fittedSheetCPUPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        fittedSheetCutWidth = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        fittedSheetCutLength = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        fittedSheetSMVValue = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        fittedSheetFabricCost = new javax.swing.JLabel();
        fittedSheetThreadCost = new javax.swing.JLabel();
        fittedSheetLableCost = new javax.swing.JLabel();
        fittedSheetTagCost = new javax.swing.JLabel();
        fittedSheetPEBagCost = new javax.swing.JLabel();
        fittedSheetPOH = new javax.swing.JLabel();
        fittedSheetLabourCost = new javax.swing.JLabel();
        fittedSheetTotalCost = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        fittedSheetTotalMaterialCost = new javax.swing.JLabel();
        jLabel325 = new javax.swing.JLabel();
        jLabel326 = new javax.swing.JLabel();
        jLabel327 = new javax.swing.JLabel();
        fittedSheetNetSellingPrice = new javax.swing.JLabel();
        fittedSheetTaxes = new javax.swing.JLabel();
        fittedSheetGrossSellingPrice = new javax.swing.JLabel();
        bedSheetExportButton = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        fittedSheetCardboardCost = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        fittedSheetElasticCost = new javax.swing.JLabel();

        bedSheetCostingPanel.setMinimumSize(new java.awt.Dimension(500, 500));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel5.setText("Fitted Sheet Costing");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel6.setText("Select Product Range:");

        fittedSheetProductRangeCombo.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetProductRangeCombo.setModel(new javax.swing.DefaultComboBoxModel(BolsterPillowcaseLogic.getProductRanges()));
        fittedSheetProductRangeCombo.setRenderer(new ComboBoxRenderer(BolsterPillowcaseLogic.getProductRanges()));
        fittedSheetProductRangeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fittedSheetProductRangeComboActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel7.setText("Select Material Type:");

        fittedSheetMaterialTypeCombo.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetMaterialTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(BolsterPillowcaseLogic.getMaterialTypes((String)fittedSheetProductRangeCombo.getSelectedItem())));
        fittedSheetMaterialTypeCombo.setRenderer(new ComboBoxRenderer(BolsterPillowcaseLogic.getMaterialTypes((String)fittedSheetProductRangeCombo.getSelectedItem())));

        fittedSheetSizeCombo.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(FittedSheetLogic.getFittedSheetSizes()));
        fittedSheetSizeCombo.setRenderer(new ComboBoxRenderer(FittedSheetLogic.getFittedSheetSizes()));

        fittedSheetHeight.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetHeight.setText("10");
        fittedSheetHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fittedSheetHeightActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel12.setText("inches");

        bedSheetSizeLable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bedSheetSizeLable.setText("Select Size:");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel11.setText("Wastage:");

        fittedSheetUseCustom.setBackground(new java.awt.Color(204, 204, 204));
        fittedSheetUseCustom.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetUseCustom.setText("Use Custom Sizes");
        fittedSheetUseCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fittedSheetUseCustomActionPerformed(evt);
            }
        });

        bedSheetCustomPanel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        bedSheetCustomPanel.setPreferredSize(new java.awt.Dimension(411, 206));
        bedSheetCustomPanel.setVisible(false);
        bedSheetCustomPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel9.setText("Width (inches) :");
        bedSheetCustomPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 16, -1, -1));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel10.setText("Length (inches):");
        bedSheetCustomPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 52, -1, -1));

        fittedSheetCustomWidth.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bedSheetCustomPanel.add(fittedSheetCustomWidth, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 11, 96, -1));

        fittedSheetCustomLength.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bedSheetCustomPanel.add(fittedSheetCustomLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(199, 49, 96, -1));

        fittedSheetIncludeLable.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetIncludeLable.setText("Include Lable");
        bedSheetCustomPanel.add(fittedSheetIncludeLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 87, -1, -1));

        fittedSheetIncludeTag.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetIncludeTag.setText("Include Tag");
        bedSheetCustomPanel.add(fittedSheetIncludeTag, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        fittedSheetIncludeCardboard.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetIncludeCardboard.setText("Include Cardboard");
        bedSheetCustomPanel.add(fittedSheetIncludeCardboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        fittedSheetIncludePEBag.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetIncludePEBag.setText("Include PE Bag");
        bedSheetCustomPanel.add(fittedSheetIncludePEBag, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        fittedSheetSubmitButton.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetSubmitButton.setText("Find Cost Per Unit");
        fittedSheetSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fittedSheetSubmitButtonActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel30.setText("Margin:");

        jLabel55.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel55.setText("Taxes:");

        fittedSheetMarginField.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetMarginField.setText(Config.profitMargin);

        fittedSheetTaxField.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetTaxField.setText(Config.taxesRate);

        jLabel84.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel84.setText("%");

        jLabel123.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel123.setText("%");

        bedsheetOtherCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bedsheetOtherCost.setText("Other costs");

        fittedSheetOtherCostVal.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetOtherCostVal.setText("0.00");
        fittedSheetTaxField.setText(Config.taxesRate);

        jLabel23.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel23.setText("Height");

        fittedSheetWastage.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetWastage.setText("3");
        fittedSheetWastage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fittedSheetWastageActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel26.setText("%");

        bedsheetOtherCost1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        bedsheetOtherCost1.setText("Quantity");

        quantity.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        quantity.setText("1");
        fittedSheetTaxField.setText(Config.taxesRate);
        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bedSheetCostingPanelLayout = new javax.swing.GroupLayout(bedSheetCostingPanel);
        bedSheetCostingPanel.setLayout(bedSheetCostingPanelLayout);
        bedSheetCostingPanelLayout.setHorizontalGroup(
            bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel6)
                        .addGap(67, 67, 67)
                        .addComponent(fittedSheetProductRangeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel7)
                        .addGap(72, 72, 72)
                        .addComponent(fittedSheetMaterialTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(fittedSheetSubmitButton))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel5))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(248, 248, 248)
                        .addComponent(fittedSheetSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel55)
                            .addComponent(bedsheetOtherCost)
                            .addComponent(bedsheetOtherCost1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fittedSheetOtherCostVal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fittedSheetTaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fittedSheetMarginField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel123)
                            .addComponent(jLabel84)))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bedSheetSizeLable)
                            .addComponent(jLabel23)
                            .addComponent(jLabel11))
                        .addGap(132, 132, 132)
                        .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                                .addComponent(fittedSheetWastage, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26))
                            .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                                .addComponent(fittedSheetHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12))))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(bedSheetCustomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(fittedSheetUseCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        bedSheetCostingPanelLayout.setVerticalGroup(
            bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bedSheetCostingPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel6))
                    .addComponent(fittedSheetProductRangeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel7))
                    .addComponent(fittedSheetMaterialTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bedSheetCostingPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(bedSheetSizeLable))
                    .addComponent(fittedSheetSizeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(fittedSheetHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(fittedSheetWastage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(16, 16, 16)
                .addComponent(fittedSheetUseCustom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bedSheetCustomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(fittedSheetMarginField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel84))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(fittedSheetTaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel123))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bedsheetOtherCost)
                    .addComponent(fittedSheetOtherCostVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(bedSheetCostingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bedsheetOtherCost1)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fittedSheetSubmitButton)
                .addGap(169, 169, 169))
        );

        fittedSheetCPUPanel.setVisible(false);
        fittedSheetCPUPanel.setPreferredSize(new java.awt.Dimension(500, 800));

        jLabel24.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel24.setText("Cut Width:");

        fittedSheetCutWidth.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetCutWidth.setText("0.00");

        jLabel25.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel25.setText("Production Parameters");

        jLabel27.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel27.setText("Cut Length:");

        fittedSheetCutLength.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetCutLength.setText("0.00");

        jLabel28.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel28.setText("SMV Value:");

        fittedSheetSMVValue.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetSMVValue.setText("0.00");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jLabel25)
                .addContainerGap(118, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fittedSheetCutWidth)
                    .addComponent(fittedSheetCutLength)
                    .addComponent(fittedSheetSMVValue))
                .addGap(46, 46, 46))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel25)
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(fittedSheetCutWidth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(fittedSheetCutLength))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(fittedSheetSMVValue))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel14.setText("Fabric Cost:");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel15.setText("Thread Cost:");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel13.setText("Lable Cost:");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel16.setText("Tag Cost:");

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel18.setText("Elastic Cost");

        jLabel20.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel20.setText("POH:");

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel19.setText("Labour Cost:");

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel21.setText("Toatal Cost Per Unit:");

        fittedSheetFabricCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetFabricCost.setText("0.00");

        fittedSheetThreadCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetThreadCost.setText("0.00");

        fittedSheetLableCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetLableCost.setText("0.00");

        fittedSheetTagCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetTagCost.setText("0.00");

        fittedSheetPEBagCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetPEBagCost.setText("0.00");

        fittedSheetPOH.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        fittedSheetPOH.setText("0.00");

        fittedSheetLabourCost.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        fittedSheetLabourCost.setText("0.00");

        fittedSheetTotalCost.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fittedSheetTotalCost.setText("0.00");

        jLabel22.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel22.setText("Cost Per Unit");

        jLabel77.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel77.setText("Total Material Cost");

        fittedSheetTotalMaterialCost.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fittedSheetTotalMaterialCost.setText("0.00");

        jLabel325.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel325.setText("Net Selling Price:");

        jLabel326.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel326.setText("Taxes:");

        jLabel327.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel327.setText("Gross Selling Price:");

        fittedSheetNetSellingPrice.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fittedSheetNetSellingPrice.setText("0.00");

        fittedSheetTaxes.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fittedSheetTaxes.setText("0.00");

        fittedSheetGrossSellingPrice.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        fittedSheetGrossSellingPrice.setText("0.00");

        bedSheetExportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/export.png"))); // NOI18N
        bedSheetExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedSheetExportButtonActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel29.setText("PE Bag Cost:");

        fittedSheetCardboardCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetCardboardCost.setText("0.00");

        jLabel31.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel31.setText("Cardboard Cost:");

        fittedSheetElasticCost.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        fittedSheetElasticCost.setText("0.00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel22))
                    .addComponent(bedSheetExportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel327)
                    .addComponent(jLabel326)
                    .addComponent(jLabel325)
                    .addComponent(jLabel21)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel13)
                    .addComponent(jLabel16)
                    .addComponent(jLabel77)
                    .addComponent(jLabel18)
                    .addComponent(jLabel29)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fittedSheetTotalCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetLabourCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetPOH, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetPEBagCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetTagCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetLableCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetThreadCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetNetSellingPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetGrossSellingPrice, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetFabricCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetTaxes, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetTotalMaterialCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetCardboardCost, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fittedSheetElasticCost, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(46, 46, 46))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(fittedSheetFabricCost)
                        .addGap(11, 11, 11)
                        .addComponent(fittedSheetThreadCost)
                        .addGap(11, 11, 11)
                        .addComponent(fittedSheetLableCost)
                        .addGap(11, 11, 11)
                        .addComponent(fittedSheetTagCost))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel22))
                            .addComponent(bedSheetExportButton))
                        .addGap(25, 25, 25)
                        .addComponent(jLabel14)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel15)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel13)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel16)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(fittedSheetPEBagCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fittedSheetCardboardCost))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31)
                        .addGap(3, 3, 3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(fittedSheetElasticCost))
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(fittedSheetTotalMaterialCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fittedSheetPOH)
                        .addGap(13, 13, 13)
                        .addComponent(fittedSheetLabourCost)
                        .addGap(23, 23, 23)
                        .addComponent(fittedSheetTotalCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fittedSheetNetSellingPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fittedSheetTaxes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fittedSheetGrossSellingPrice))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel77)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel20)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel19)
                        .addGap(23, 23, 23)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel325)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel326)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel327)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout fittedSheetCPUPanelLayout = new javax.swing.GroupLayout(fittedSheetCPUPanel);
        fittedSheetCPUPanel.setLayout(fittedSheetCPUPanelLayout);
        fittedSheetCPUPanelLayout.setHorizontalGroup(
            fittedSheetCPUPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fittedSheetCPUPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fittedSheetCPUPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fittedSheetCPUPanelLayout.setVerticalGroup(
            fittedSheetCPUPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fittedSheetCPUPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bedSheetCostingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fittedSheetCPUPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bedSheetCostingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fittedSheetCPUPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fittedSheetProductRangeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fittedSheetProductRangeComboActionPerformed
        fittedSheetMaterialTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(BedSheetLogic.getMaterialTypes((String) fittedSheetProductRangeCombo.getSelectedItem())));
}//GEN-LAST:event_fittedSheetProductRangeComboActionPerformed

    private void fittedSheetHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fittedSheetHeightActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_fittedSheetHeightActionPerformed

    private void fittedSheetUseCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fittedSheetUseCustomActionPerformed
        // TODO add your handling code here:
        if (fittedSheetUseCustom.isSelected()) {
            bedSheetCustomPanel.setVisible(true);
            fittedSheetSizeCombo.setVisible(false);
            bedSheetSizeLable.setVisible(false);
        } else {
            bedSheetCustomPanel.setVisible(false);
            fittedSheetSizeCombo.setVisible(true);
            bedSheetSizeLable.setVisible(true);
        }
    }//GEN-LAST:event_fittedSheetUseCustomActionPerformed

    private void fittedSheetSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fittedSheetSubmitButtonActionPerformed
        FittedSheetViewModel fCost = new FittedSheetViewModel();
        String productRange = (String) fittedSheetProductRangeCombo.getSelectedItem();
        fCost.setProductRange(productRange);

        String materialType = (String) fittedSheetMaterialTypeCombo.getSelectedItem();
        fCost.setMaterialType(materialType);

        String size = (String) fittedSheetSizeCombo.getSelectedItem();
        fCost.setSize(size);

        try {
            double height = Double.parseDouble(fittedSheetHeight.getText());
            if (height < 0 || height > 50) {
                JOptionPane.showMessageDialog(this, "Height should be between 0 and 50 %");
                return;
            }
            fCost.setHeight(height);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid height value");
            return;
        }

        try {
            double wastage = Double.parseDouble(fittedSheetWastage.getText());
            if (wastage < 0 || wastage > 10) {
                JOptionPane.showMessageDialog(this, "Wastage should be between 0 and 10 %");
                return;
            }
            fCost.setWastage(wastage);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid wastage value");
            return;
        }

        try {
            double otherCost = Double.parseDouble(fittedSheetOtherCostVal.getText());
            if (otherCost < 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid value for other costs");
                return;
            }
            fCost.setOtherCost(otherCost);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid value for other costs");
            return;
        }

        try {
            double margin = Double.parseDouble(fittedSheetMarginField.getText());
            if (margin < 0) {
                JOptionPane.showMessageDialog(this, "Profit margin should be a positive value");
                return;
            }
            fCost.setMargin(margin);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid margin value");
            return;
        }

        try {
            double taxRate = Double.parseDouble(fittedSheetTaxField.getText());
            if (taxRate < 0) {
                JOptionPane.showMessageDialog(this, "Tax rate should be a positive value");
                return;
            }
            fCost.setTaxRate(taxRate);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid tax rate value");
            return;
        }

        boolean useCustom = fittedSheetUseCustom.isSelected();
        if (useCustom) {
            fCost.setIsCustom(useCustom);
            try {
                Double width = Double.parseDouble(fittedSheetCustomWidth.getText());
                if (width <= 0 || width > 120) {
                    JOptionPane.showMessageDialog(this, "Width should be between 0 and 120");
                    return;
                }
                fCost.setCustomWidth(width);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Please enter a valid diameter value");
                return;
            }

            try {
                Double length = Double.parseDouble(fittedSheetCustomLength.getText());
                if (length <= 0 || length > 120) {
                    JOptionPane.showMessageDialog(this, "Length should be between 0 and 120");
                    return;
                }
                fCost.setCustomLength(length);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Please enter a valid height value");
                return;
            }

            fCost.setIncludeLable(fittedSheetIncludeLable.isSelected());
            fCost.setIncludeTag(fittedSheetIncludeTag.isSelected());
            fCost.setIncludePEBag(fittedSheetIncludePEBag.isSelected());
            fCost.setIncludeCardboard(fittedSheetIncludeCardboard.isSelected());
        }
        DecimalFormat format = new DecimalFormat();
        format.setMaximumFractionDigits(2);
        format.setMinimumFractionDigits(2);

        FittedSheetViewModel bReturn = FittedSheetLogic.getCostPerUnit(fCost);
        fittedSheetFabricCost.setText(format.format(bReturn.getFabricCost()) + "");
        fittedSheetThreadCost.setText(format.format(bReturn.getThreadCost()) + "");
        fittedSheetLableCost.setText(format.format(bReturn.getLableCost()) + "");
        fittedSheetTagCost.setText(format.format(bReturn.getTagCost()) + "");
        fittedSheetPEBagCost.setText(format.format(bReturn.getPEBagCost()) + "");
        fittedSheetCardboardCost.setText(format.format(bReturn.getCardBoardCost()) + "");
        fittedSheetElasticCost.setText(format.format(bReturn.getElasticCost()) + "");
        fittedSheetPOH.setText(format.format(bReturn.getPohCost()) + "");
        fittedSheetLabourCost.setText(format.format(bReturn.getLabourCost()) + "");
        fittedSheetTotalCost.setText(format.format(bReturn.getTotalCost()) + "");
        fittedSheetCutWidth.setText(format.format(bReturn.getSmvValue()));
        fittedSheetTotalMaterialCost.setText(format.format(bReturn.getTotalMaterialCost()));
        fittedSheetNetSellingPrice.setText(format.format(bReturn.getNetSellingPrice()));
        fittedSheetTaxes.setText(format.format(bReturn.getTaxes()));
        fittedSheetGrossSellingPrice.setText(format.format(bReturn.getGrossSellingPrice()));

        fittedSheetSMVValue.setText(format.format(bReturn.getSmvValue()));
        fittedSheetCutWidth.setText(format.format(bReturn.getCuttingWidth()));
        fittedSheetCutLength.setText(format.format(bReturn.getCuttingHeight()));

        MainWindow.tempFaric = bReturn.getFabric();
        MainWindow.tempTaffata = bReturn.getTaffata();
        MainWindow.tempPadding = bReturn.getPadding();

        fittedSheetCPUPanel.setVisible(true);
}//GEN-LAST:event_fittedSheetSubmitButtonActionPerformed

    private void bedSheetExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedSheetExportButtonActionPerformed
        //ading the quotation object
        QuationObject qObject = new QuationObject(
                "Fitted Sheet",
                fittedSheetProductRangeCombo.getSelectedItem() + "",
                fittedSheetMaterialTypeCombo.getSelectedItem() + "",
                fittedSheetUseCustom.isSelected() == true ? fittedSheetCustomWidth.getText() + "X" + fittedSheetCustomWidth.getText() : fittedSheetSizeCombo.getSelectedItem() + "",
                1,
                Double.parseDouble(fittedSheetGrossSellingPrice.getText().replaceAll(",", "")));

        //adding the costing summary object
        SummaryObject summaryObj = new SummaryObject(
                "Fitted Sheet",
                fittedSheetProductRangeCombo.getSelectedItem() + "",
                fittedSheetMaterialTypeCombo.getSelectedItem() + "",
                "",
                fittedSheetUseCustom.isSelected() == true ? fittedSheetCustomWidth.getText() + "X" + fittedSheetCustomWidth.getText() : fittedSheetSizeCombo.getSelectedItem() + "",
                1,
                Double.parseDouble(fittedSheetTotalCost.getText().replaceAll(",", "")),
                Double.parseDouble(fittedSheetMarginField.getText().replaceAll(",", "")),
                Double.parseDouble(fittedSheetTaxField.getText().replaceAll(",", "")));

        //have to add data to this
        ArrayList<Map.Entry<String, String>> prodSpecs = new ArrayList<Map.Entry<String, String>>();
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Product Range", fittedSheetProductRangeCombo.getSelectedItem() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Material Type", fittedSheetMaterialTypeCombo.getSelectedItem() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Size", fittedSheetUseCustom.isSelected() == true ? fittedSheetCustomWidth.getText() + "X" + fittedSheetCustomWidth.getText() : fittedSheetSizeCombo.getSelectedItem() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Height", fittedSheetHeight.getText()));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Wastage", fittedSheetWastage.getText()));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Include Lable", fittedSheetIncludeLable.isSelected() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Include Tag", fittedSheetIncludeTag.isSelected() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Include PE Bag", fittedSheetIncludePEBag.isSelected() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Include Cardboard", fittedSheetIncludeCardboard.isSelected() + ""));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Margin", fittedSheetMarginField.getText()));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Taxes", fittedSheetTaxField.getText()));
        prodSpecs.add(new AbstractMap.SimpleEntry<String, String>("Other Costs", fittedSheetOtherCostVal.getText()));

        ArrayList<Map.Entry<String, String>> costDescs = new ArrayList<Map.Entry<String, String>>();
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Fabric Cost", fittedSheetFabricCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Thread Cost", fittedSheetThreadCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Lable Cost", fittedSheetLableCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Tag Cost", fittedSheetTagCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("PE Bag Cost", fittedSheetPEBagCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Cardboard Cost", fittedSheetCardboardCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Elastic Cost", fittedSheetElasticCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Total Material Cost", fittedSheetTotalMaterialCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("POH", fittedSheetPOH.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Labour Cost", fittedSheetLabourCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Total Cost Per Unit", fittedSheetTotalCost.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Net Selling Price", fittedSheetNetSellingPrice.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Taxes", fittedSheetTaxes.getText()));
        costDescs.add(new AbstractMap.SimpleEntry<String, String>("Gross Selling Price", fittedSheetGrossSellingPrice.getText()));

        ArrayList<Map.Entry<String, String>> manuSpecs = new ArrayList<Map.Entry<String, String>>();
        manuSpecs.add(new AbstractMap.SimpleEntry<String, String>("Cut Width", fittedSheetCutWidth.getText()));
        manuSpecs.add(new AbstractMap.SimpleEntry<String, String>("Cut Length", fittedSheetCutLength.getText()));
        manuSpecs.add(new AbstractMap.SimpleEntry<String, String>("SMV Value", fittedSheetSMVValue.getText()));

        try {
            int n = Integer.parseInt(quantity.getText());
            qObject.setQuantity(n);
            summaryObj.setQuantity(n);
            
            if(MainWindow.tempFaric!=null){
                Set keys = MainWindow.tempFaric.keySet();
                for(int i=0;i<keys.size();i++){
                    String key = (String) keys.toArray()[i];
                    if(MainWindow.globalFaric.containsKey(key)){
                        String sValue = (String)MainWindow.globalFaric.get(key);
                        Double value = Double.parseDouble(sValue);
                        String tempSValue = (String)MainWindow.tempFaric.get(key);
                        Double tempValue = Double.parseDouble(tempSValue) * n;
                        
                        value += tempValue;
                        
                        MainWindow.globalFaric.put(key, value);
                    }else{
                        String sValue = (String)MainWindow.tempFaric.get(key);
                        Double value = Double.parseDouble(sValue) * n;
                        MainWindow.globalFaric.put(key, value);
                    }
                }
            }
            
            if(MainWindow.tempPadding!=null){
                Set keys = MainWindow.tempPadding.keySet();
                for(int i=0;i<keys.size();i++){
                    String key = (String) keys.toArray()[i];
                    if(MainWindow.globalPadding.containsKey(key)){
                        String sValue = (String)MainWindow.globalPadding.get(key);
                        Double value = Double.parseDouble(sValue);
                        String tempSValue = (String)MainWindow.tempPadding.get(key);
                        Double tempValue = Double.parseDouble(tempSValue) * n;
                        
                        value += tempValue;
                        
                        MainWindow.globalPadding.put(key, value);
                    }else{
                        String sValue = (String)MainWindow.tempPadding.get(key);
                        Double value = Double.parseDouble(sValue) * n;
                        MainWindow.globalPadding.put(key, value);
                    }
                }
            }
            
            if(MainWindow.tempTaffata!=null){
                Set keys = MainWindow.tempTaffata.keySet();
                for(int i=0;i<keys.size();i++){
                    String key = (String) keys.toArray()[i];
                    if(MainWindow.globalTaffata.containsKey(key)){
                        String sValue = (String)MainWindow.globalTaffata.get(key);
                        Double value = Double.parseDouble(sValue);
                        String tempSValue = (String)MainWindow.tempTaffata.get(key);
                        Double tempValue = Double.parseDouble(tempSValue) * n;
                        
                        value += tempValue;
                        
                        MainWindow.globalTaffata.put(key, value);
                    }else{
                        String sValue = (String)MainWindow.tempTaffata.get(key);
                        Double value = Double.parseDouble(sValue) * n;
                        MainWindow.globalTaffata.put(key, value);
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity value");
            return;
        }

        ItemSummaryObject itemSumObj = new ItemSummaryObject("Fitted Sheet", summaryObj, prodSpecs, costDescs, manuSpecs);
        MainWindow.quotation.addQuatationObject(qObject, itemSumObj);

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final AddOrderSuccess dialog = new AddOrderSuccess(new javax.swing.JFrame(), true);
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_bedSheetExportButtonActionPerformed

    private void fittedSheetWastageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fittedSheetWastageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fittedSheetWastageActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new FittedSheetsCostingPanel());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bedSheetCostingPanel;
    private javax.swing.JPanel bedSheetCustomPanel;
    private javax.swing.JButton bedSheetExportButton;
    private javax.swing.JLabel bedSheetSizeLable;
    private javax.swing.JLabel bedsheetOtherCost;
    private javax.swing.JLabel bedsheetOtherCost1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel fittedSheetCPUPanel;
    private javax.swing.JLabel fittedSheetCardboardCost;
    private javax.swing.JTextField fittedSheetCustomLength;
    private javax.swing.JTextField fittedSheetCustomWidth;
    private javax.swing.JLabel fittedSheetCutLength;
    private javax.swing.JLabel fittedSheetCutWidth;
    private javax.swing.JLabel fittedSheetElasticCost;
    private javax.swing.JLabel fittedSheetFabricCost;
    private javax.swing.JLabel fittedSheetGrossSellingPrice;
    private javax.swing.JTextField fittedSheetHeight;
    private javax.swing.JRadioButton fittedSheetIncludeCardboard;
    private javax.swing.JRadioButton fittedSheetIncludeLable;
    private javax.swing.JRadioButton fittedSheetIncludePEBag;
    private javax.swing.JRadioButton fittedSheetIncludeTag;
    private javax.swing.JLabel fittedSheetLableCost;
    private javax.swing.JLabel fittedSheetLabourCost;
    private javax.swing.JTextField fittedSheetMarginField;
    private javax.swing.JComboBox fittedSheetMaterialTypeCombo;
    private javax.swing.JLabel fittedSheetNetSellingPrice;
    private javax.swing.JTextField fittedSheetOtherCostVal;
    private javax.swing.JLabel fittedSheetPEBagCost;
    private javax.swing.JLabel fittedSheetPOH;
    private javax.swing.JComboBox fittedSheetProductRangeCombo;
    private javax.swing.JLabel fittedSheetSMVValue;
    private javax.swing.JComboBox fittedSheetSizeCombo;
    private javax.swing.JButton fittedSheetSubmitButton;
    private javax.swing.JLabel fittedSheetTagCost;
    private javax.swing.JTextField fittedSheetTaxField;
    private javax.swing.JLabel fittedSheetTaxes;
    private javax.swing.JLabel fittedSheetThreadCost;
    private javax.swing.JLabel fittedSheetTotalCost;
    private javax.swing.JLabel fittedSheetTotalMaterialCost;
    private javax.swing.JRadioButton fittedSheetUseCustom;
    private javax.swing.JTextField fittedSheetWastage;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel325;
    private javax.swing.JLabel jLabel326;
    private javax.swing.JLabel jLabel327;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField quantity;
    // End of variables declaration//GEN-END:variables
}
